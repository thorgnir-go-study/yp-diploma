// Code generated by mockery v2.10.0. DO NOT EDIT.

package order

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	entity "github.com/thorgnir-go-study/yp-diploma/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, order
func (_m *MockRepository) Create(ctx context.Context, order entity.Order) (uuid.UUID, error) {
	ret := _m.Called(ctx, order)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) uuid.UUID); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, orderID
func (_m *MockRepository) Get(ctx context.Context, orderID uuid.UUID) (*entity.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccrualsSum provides a mock function with given fields: ctx, userID
func (_m *MockRepository) GetAccrualsSum(ctx context.Context, userID uuid.UUID) (decimal.NullDecimal, error) {
	ret := _m.Called(ctx, userID)

	var r0 decimal.NullDecimal
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) decimal.NullDecimal); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(decimal.NullDecimal)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderNumber provides a mock function with given fields: ctx, orderNumber
func (_m *MockRepository) GetByOrderNumber(ctx context.Context, orderNumber entity.OrderNumber) (*entity.Order, error) {
	ret := _m.Called(ctx, orderNumber)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, entity.OrderNumber) *entity.Order); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.OrderNumber) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewOrders provides a mock function with given fields: ctx
func (_m *MockRepository) GetNewOrders(ctx context.Context) ([]*entity.Order, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Order
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, userID
func (_m *MockRepository) List(ctx context.Context, userID uuid.UUID) ([]*entity.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOrderAccrualAndStatus provides a mock function with given fields: ctx, orderID, accrual, status
func (_m *MockRepository) SetOrderAccrualAndStatus(ctx context.Context, orderID uuid.UUID, accrual decimal.NullDecimal, status entity.OrderStatus) error {
	ret := _m.Called(ctx, orderID, accrual, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, decimal.NullDecimal, entity.OrderStatus) error); ok {
		r0 = rf(ctx, orderID, accrual, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOrderStatus provides a mock function with given fields: ctx, orderID, status
func (_m *MockRepository) SetOrderStatus(ctx context.Context, orderID uuid.UUID, status entity.OrderStatus) error {
	ret := _m.Called(ctx, orderID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OrderStatus) error); ok {
		r0 = rf(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
