// Code generated by mockery v2.10.0. DO NOT EDIT.

package accrualprocessor

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/thorgnir-go-study/yp-diploma/internal/entity"

	time "time"

	uuid "github.com/gofrs/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CleanProcessedTasks provides a mock function with given fields: ctx
func (_m *MockRepository) CleanProcessedTasks(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *MockRepository) CreateTask(ctx context.Context, task *entity.ProcessingTask) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ProcessingTask) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTasks provides a mock function with given fields: ctx, tasks
func (_m *MockRepository) CreateTasks(ctx context.Context, tasks []*entity.ProcessingTask) error {
	ret := _m.Called(ctx, tasks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.ProcessingTask) error); ok {
		r0 = rf(ctx, tasks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTasksToRun provides a mock function with given fields: ctx
func (_m *MockRepository) GetTasksToRun(ctx context.Context) ([]*entity.ProcessingTask, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.ProcessingTask
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.ProcessingTask); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ProcessingTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RescheduleTask provides a mock function with given fields: ctx, taskId, nextRun
func (_m *MockRepository) RescheduleTask(ctx context.Context, taskId uuid.UUID, nextRun time.Time) error {
	ret := _m.Called(ctx, taskId, nextRun)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r0 = rf(ctx, taskId, nextRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTaskStatus provides a mock function with given fields: ctx, taskId, status
func (_m *MockRepository) SetTaskStatus(ctx context.Context, taskId uuid.UUID, status entity.ProcessingTaskStatus) error {
	ret := _m.Called(ctx, taskId, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.ProcessingTaskStatus) error); ok {
		r0 = rf(ctx, taskId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
