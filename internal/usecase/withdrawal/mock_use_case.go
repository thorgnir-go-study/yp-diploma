// Code generated by mockery v2.10.0. DO NOT EDIT.

package withdrawal

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	entity "github.com/thorgnir-go-study/yp-diploma/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

// CreateWithdrawal provides a mock function with given fields: ctx, userID, orderNumber, sum
func (_m *MockUseCase) CreateWithdrawal(ctx context.Context, userID uuid.UUID, orderNumber entity.OrderNumber, sum decimal.Decimal) error {
	ret := _m.Called(ctx, userID, orderNumber, sum)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OrderNumber, decimal.Decimal) error); ok {
		r0 = rf(ctx, userID, orderNumber, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWithdrawals provides a mock function with given fields: ctx, userID
func (_m *MockUseCase) GetWithdrawals(ctx context.Context, userID uuid.UUID) ([]*entity.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*entity.Withdrawal
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Withdrawal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawalsSum provides a mock function with given fields: ctx, userID
func (_m *MockUseCase) GetWithdrawalsSum(ctx context.Context, userID uuid.UUID) (decimal.NullDecimal, error) {
	ret := _m.Called(ctx, userID)

	var r0 decimal.NullDecimal
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) decimal.NullDecimal); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(decimal.NullDecimal)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
